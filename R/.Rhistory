#Tema para hacer gráficas sin fondo gris en ggplot
empty_background <- function(base_size = 12, base_family = "Helvetica")
{
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.ticks.margin = unit(0, "lines")
)
}
#Agrega un color más a la paleta colorblind de ggthemes
ggthemes_data$colorblind <- append(ggthemes_data$colorblind, "#80f7e9")
assignInNamespace("ggthemes_data", ggthemes_data, ns="ggthemes")
theme_nothing <- function(base_size = 12, base_family = "Helvetica")
{
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
#legend.text=element_blank(),
axis.text.x =  element_blank(),
axis.text.y =  element_blank(),
axis.title.x=  element_blank(),
axis.title.y=  element_blank(),
rect             = element_blank(),
line             = element_blank()
#text             = element_blank(),
#axis.ticks.margin = unit(0, "lines")
)
}
ggmap(MexMap, darken=c(0.2,'white')) + labs(title = "Puntos de muestreo Urbanos y Rurales", x = "", y = "") +
geom_polygon(data=edo_df, aes(long, lat, group=group), colour='black', fill='white', inherit.aes=FALSE) +
geom_point(data = concentradohogar, aes(x = LON_DEC, y = LAT_DEC, colour=AMBITO), size=2, inherit.aes=FALSE)
load('./Rdata/MapaMexGoogle.Rdata')
load('./Rdata/MapaOaxGoogle.Rdata')
load('./Rdata/MapaHidalgoGoogle.Rdata')
load('./Rdata/MapaVeracruzGoogle.Rdata')
ggplot() +
geom_polygon(data=DF_df, aes(long, lat, group=group), colour='black', fill='white', inherit.aes=FALSE) +
geom_point(data = concDF, aes(x = LON_DEC, y = LAT_DEC, colour=AMBITO), inherit.aes=FALSE)
nombres_edo<-distinct(data.frame(clave=ent$clave_edo, edo=ent$edo))
library(foreign)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
library(knitr)
library(rgdal)
library(googleVis)
library(ggmap)
theme_nothing <- function(base_size = 12, base_family = "Helvetica")
{
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
#legend.text=element_blank(),
axis.text.x =  element_blank(),
axis.text.y =  element_blank(),
axis.title.x=  element_blank(),
axis.title.y=  element_blank(),
rect             = element_blank(),
line             = element_blank()
#text             = element_blank(),
#axis.ticks.margin = unit(0, "lines")
)
}
#Tema para hacer gráficas sin fondo gris en ggplot
empty_background <- function(base_size = 12, base_family = "Helvetica")
{
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.ticks.margin = unit(0, "lines")
)
}
#Agrega un color más a la paleta colorblind de ggthemes
ggthemes_data$colorblind <- append(ggthemes_data$colorblind, "#80f7e9")
assignInNamespace("ggthemes_data", ggthemes_data, ns="ggthemes")
options(digits=4)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, cache=TRUE)
library(foreign)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
library(knitr)
library(rgdal)
library(googleVis)
library(ggmap)
theme_nothing <- function(base_size = 12, base_family = "Helvetica")
{
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
#legend.text=element_blank(),
axis.text.x =  element_blank(),
axis.text.y =  element_blank(),
axis.title.x=  element_blank(),
axis.title.y=  element_blank(),
rect             = element_blank(),
line             = element_blank()
#text             = element_blank(),
#axis.ticks.margin = unit(0, "lines")
)
}
#Tema para hacer gráficas sin fondo gris en ggplot
empty_background <- function(base_size = 12, base_family = "Helvetica")
{
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.ticks.margin = unit(0, "lines")
)
}
#Agrega un color más a la paleta colorblind de ggthemes
ggthemes_data$colorblind <- append(ggthemes_data$colorblind, "#80f7e9")
assignInNamespace("ggthemes_data", ggthemes_data, ns="ggthemes")
#csl descargado de: https://github.com/citation-style-language/styles/blob/master/spanish-legal.csl
#Info de: http://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html#citation-and-reference-styles
ent <- read.table('../Datos/INEGI/Claves Entidades Federativas y Municipios PEF 2012.txt', sep='\t')
names(ent) <- c('clave_edo', 'edo', 'clave_mun', 'mun')
nombres_edo<-distinct(data.frame(clave=ent$clave_edo, edo=ent$edo))
# viviendas <- read.dbf('../Datos INEGI/Características de las viviendas que habitan los integrantes del hogar.dbf')
# hogares <- read.dbf('../Datos INEGI/Características de los hogares que habitan los integrantes del hogar.dbf')
# poblacion <- read.dbf('../Datos INEGI/Características sociodemográficas de los integrantes del hogar.dbf')
# trabajos <- read.dbf('../Datos INEGI/Condición de actividad de los integrantes del hogar de 12 o más años.dbf')
# erogaciones <- read.dbf('../Datos INEGI/Erogaciones de capital por hogar.dbf')
# gastoshogar <- read.dbf('../Datos INEGI/Gastos en los hogares.dbf')
# gastospersona <- read.dbf('../Datos INEGI/Gastos realizados por cada integrante del hogar.dbf')
# gastotarjetas <- read.dbf('../Datos INEGI/Gastos realizados por el hogar y que fueron cubiertos mediante alguna tarjeta de crédito bancaria yo comercial.dbf')
# ingresos <- read.dbf('../Datos INEGI/Ingresos y percepciones financieras y de capital de cada uno de los integrantes del hogar.dbf')
# agro <- read.dbf('../Datos INEGI/Negocios agrícolas de los hogares.dbf')
# noagro <- read.dbf('../Datos INEGI/Negocios no agrícolas de los hogares.dbf')
concentradohogar <- read.dbf('../Datos/INEGI/Principales variables por hogar.dbf')
localidades <- read.csv('../Datos/Catálogo Único de Claves de Áreas Geoestadísticas Estatales, Municipales y Localidades.csv')
# agebs_urbanos <- readOGR(dsn="../../Mapas/mgau2013v6_0", layer='agebs_urbanos_2013')
# loc_rurales <- readOGR(dsn="../../Mapas/mglr2013v6_0", layer='Localidades rurales_2013')
municipios <- readOGR(dsn="../Datos/Municipios", layer='Municipios')
estados <- readOGR(dsn="../Datos/estados_ligero", layer='Mex_Edos')
#Creando nuevas variables en la tabla concentradohogar
concentradohogar$Estado <- factor(substring(concentradohogar$ubica_geo, 1, 2))
levels(concentradohogar$Estado) <- arrange(nombres_edo, clave)[,2]
# concentradohogar$Localidad <- factor(substring(concentradohogar$ubica_geo, 6, 10))
# levels(concentradohogar$Localidad) <- as.integer(levels(concentradohogar$Localidad))
# concentradohogar$LatLoc <-
#En la table de localidades
localidades$ubica_geo <- factor(paste0(sprintf("%02d", localidades[,1]), sprintf("%03d", localidades[,2]), sprintf("%04d", localidades[,3])))
#Agregando los datos de la tabla de localidades a la tabla concentradohogar
concentradohogar <- left_join(concentradohogar, localidades[,c(-1,-2,-3,-6,-7)], by='ubica_geo')
#points<-as.data.frame(unique(c(concentradohogar$LAT_DEC, concentradohogar$LON_DEC)))
#Creando dataframe
Resumen_Ing_Eg <- concentradohogar %>%
group_by(Estado) %>%
summarise(número=n(),
promedio_ing_cor = mean(ing_cor),
desv_est_ing_cor = sd(ing_cor),
promedio_gasto_mon = mean(gasto_mon),
desv_est_gasto_mon = sd(gasto_mon))
kable(Resumen_Ing_Eg, format = "markdown")
qplot(x=Estado, y=número, data=Resumen_Ing_Eg, geom="bar", stat="identity", position="dodge") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
tabla_graf <- data.frame(concentradohogar$Estado, concentradohogar$ing_cor, concentradohogar$gasto_mon)
names(tabla_graf)<-c('Estado', 'Ingreso', 'Gasto')
tabla_graf <- tabla_graf %>% gather(key=key, value=value, -Estado)
ggplot(tabla_graf) +  geom_boxplot(aes(x=Estado, y=value,  group=interaction(Estado, key), dodge=key, fill=key)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous(limits = quantile(tabla_graf$value, c(0.1, 0.9)))
concentradohogar <- within(concentradohogar, decil_ingreso <- factor(as.integer(cut(ing_cor, quantile(ing_cor, probs=0:10/10), include.lowest=TRUE))))
a<-concentradohogar %>% group_by(Estado, decil_ingreso) %>%
summarise(n=n(),
agrope=mean(agrope),
noagrop = mean(noagrop),
ing=mean(ing_cor))
concOax <- concentradohogar[concentradohogar$Estado=='Oaxaca',]
concHid <- concentradohogar[concentradohogar$Estado=='Hidalgo',]
concVer <- concentradohogar[concentradohogar$Estado=='Veracruz de Ignacio de la Llave',]
concDF <- concentradohogar[concentradohogar$Estado=='Distrito Federal',]
library(devtools)
devtools::install_github("rstudio/rmarkdown")
options(digits=4)
library(foreign)
library(ggthemes)
library(knitr)
library(rgdal)
library(igraph)
library(Matrix)
library(googleVis)
library(ggmap)
library(xtable)
library(ineq)
library(bnlearn)
library(grid) #función unit
library(dplyr)
library(tidyr)
library(ggplot2)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, cache=TRUE)
theme_nothing <- function(base_size = 12, base_family = "Helvetica")
{
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
#legend.text=element_blank(),
axis.text.x =  element_blank(),
axis.text.y =  element_blank(),
axis.title.x=  element_blank(),
axis.title.y=  element_blank(),
rect             = element_blank(),
line             = element_blank()
#text             = element_blank(),
#axis.ticks.margin = unit(0, "lines")
)
}
#Agrega un color más a la paleta colorblind de ggthemes
ggthemes_data$colorblind <- append(ggthemes_data$colorblind, "#dd4444") #rojo
ggthemes_data$colorblind <- append(ggthemes_data$colorblind, "#7cfc00") #lawn green
ggthemes_data$colorblind <- append(ggthemes_data$colorblind, "#2f4f4f") # gris obscuro
#ggthemes_data$colorblind <- append(ggthemes_data$colorblind, "#80f7e9") # verde aqua
assignInNamespace("ggthemes_data", ggthemes_data, ns="ggthemes")
#csl descargado de: https://github.com/citation-style-language/styles/blob/master/spanish-legal.csl
#Info de: http://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html#citation-and-reference-styles
ent <- read.table('../Datos/INEGI/Claves Entidades Federativas y Municipios PEF 2012.txt', sep='\t')
names(ent) <- c('clave_edo', 'edo', 'clave_mun', 'mun')
nombres_edo<-distinct(data.frame(clave=ent$clave_edo, edo=ent$edo))
viviendas <- read.dbf('../Datos/INEGI/Características de las viviendas que habitan los integrantes del hogar.dbf')
concentradohogar <- read.dbf('../Datos/INEGI/Principales variables por hogar.dbf')
localidades <- read.csv('../Datos/Catálogo Único de Claves de Áreas Geoestadísticas Estatales, Municipales y Localidades.csv')
municipios <- readOGR(dsn="../Datos/Municipios", layer='Municipios')
estados <- readOGR(dsn="../Datos/estados_ligero", layer='Mex_Edos')
estados2 <- spTransform(estados, CRS("+proj=longlat +init=epsg:4326 +datum=WGS84"))
estados2@data$id = nombres_edo$edo
edo_df <- fortify(estados2, region = "id")
save(edo_df, file='./Rdata/edo_df.RData')
load('./Rdata/edo_df.RData')
concentradohogar$Estado <- factor(substring(concentradohogar$ubica_geo, 1, 2))
levels(concentradohogar$Estado) <- arrange(nombres_edo, clave)[,2]
#En la tabla de localidades
localidades$ubica_geo <- factor(paste0(sprintf("%02d", localidades[,1]), sprintf("%03d", localidades[,2]), sprintf("%04d", localidades[,3])))
#Agregando los datos de la tabla de localidades a la tabla concentradohogar
concentradohogar <- left_join(concentradohogar, localidades[,c(-1,-2,-3,-6,-7)], by='ubica_geo')
#Deciles de ingreso
concentradohogar <- within(concentradohogar, decil_ingreso <- factor(as.integer(cut(ing_cor, quantile(ing_cor, probs=0:10/10), include.lowest=TRUE))))
datosMuestra <- concentradohogar %>%group_by(ubica_geo) %>% summarise(NumEnc=n()) %>% left_join(unique(select(concentradohogar, ubica_geo, LON_DEC, LAT_DEC, AMBITO)))
ggplot() +
geom_polygon(data=edo_df, aes(long, lat, group=group), colour='black', fill='white', inherit.aes=FALSE) +
geom_point(data = datosMuestra, aes(x = LON_DEC, y = LAT_DEC, colour=AMBITO, size=NumEnc), inherit.aes=FALSE) + coord_fixed()
Resumen_Ing_Eg <- concentradohogar %>%
group_by(Estado) %>%
summarise(número=n(),
promedio_ing_cor = mean(ing_cor),
desv_est_ing_cor = sd(ing_cor),
promedio_gasto_mon = mean(gasto_mon),
desv_est_gasto_mon = sd(gasto_mon))
tabla_graf <- data.frame(concentradohogar$Estado, concentradohogar$ing_cor, concentradohogar$gasto_mon)
names(tabla_graf)<-c('Estado', 'Ingreso', 'Gasto')
tabla_graf <- tabla_graf %>% gather(key=key, value=value, -Estado)
ggplot(tabla_graf) +
geom_boxplot(aes(x=Estado, y=value,  group=interaction(Estado, key), dodge=key, fill=key), outlier.size = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Gini_Edo <- concentradohogar %>%
group_by(Estado) %>%
summarise(Gini=ineq(ing_cor))
edo_df_gini <- edo_df %>%
mutate(Estado = id) %>%
left_join(Gini_Edo)
ggplot() +
geom_polygon(data=edo_df_gini, aes(long, lat, group=group, fill=Gini), colour='black', inherit.aes=FALSE) +
coord_fixed() + scale_fill_gradientn(colours=c('grey', 'navy blue'))
ggplot() +
geom_polygon(data=edo_df_gini, aes(long, lat, group=group, fill=Gini), colour='black', inherit.aes=FALSE) +
coord_fixed() + scale_fill_gradientn(colours=c('grey', 'navy blue', 'pink', 'yellow', 'black', 'chartreuse'))
ggplot() +
geom_polygon(data=edo_df_gini, aes(long, lat, group=group, fill=Gini), colour='black', inherit.aes=FALSE) +
coord_fixed() + scale_fill_gradientn(colours=c('light blue', 'black'))
ggplot() +
geom_polygon(data=edo_df_gini, aes(long, lat, group=group, fill=Gini), colour='black', inherit.aes=FALSE) +
coord_fixed() + scale_fill_gradientn(colours=c('light blue', 'dark blue'))
df_red1 <- concentradohogar %>% select(-folioviv, -foliohog, -ubica_geo, -ageb, -est_dis, -upm, -factor_hog, -NOM_LOC, -LAT_DEC, -LON_DEC, -ALTITUD, -CVE_CARTA, -PLANO, -decil_ingreso, -edad_jefe, -tot_integ, -hombres, -mujeres, -mayores, -menores, -p12_64, -p65mas, -ocupados, -percep_ing, -perc_ocupa) %>% filter(complete.cases(.))
load('./Rdata/net1.RData')
graphviz.plot(net1, shape='ellipse')
strength1 <- arc.strength(net1, df_red1)
net2 <- graph.edgelist(as.matrix(strength1[1:100,1:2]))
E(net2)$arrow.size=0.3
plot(net2,  			#the graph to be plotted
layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
main='Red con relaciones más fuertes',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=1,			#the font of the name labels
vertex.label=V(net2)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1,			#specifies the size of the font of the labels. can also be made to vary
vertex.size=5,
vertex.label.cex=3
)
vars <- unique(c(strength1[1:50,1], strength1[1:50,2]))
df_red2 <- df_red1[,vars]
load('./Rdata/net2.RData')
df_red3 <- df_red1 %>% select(tam_loc, est_socio, clase_hog, sexo_jefe, educa_jefe, ing_cor, gasto_mon, educacion, Estado)
net3 <- hc(df_red3)
strength3 <- arc.strength(net3, df_red3)
strength.plot(net3, strength3, shape='ellipse')
df_red4 <- concentradohogar %>% select(tam_loc, est_socio, clase_hog, sexo_jefe, educa_jefe, ing_cor, gasto_mon, educacion, Estado, AMBITO, decil_ingreso) %>% filter(complete.cases(.))
net4 <- hc(df_red4)
strength4 <- arc.strength(net4, df_red4)
strength.plot(net4, strength4, shape='ellipse')
head(concentradohogar)
gastoshogar <- read.dbf('../Datos/INEGI/Gastos en los hogares.dbf')
table(gastoshogar$clave)
plot(table(gastoshogar$clave))
prop.table(table(gastoshogar$clave))
qplot(prop.table(table(gastoshogar$clave)))
col.names(prop.table(table(gastoshogar$clave)))
names(prop.table(table(gastoshogar$clave)))
df_temp <- data.frame(gasto=names(prop.table(table(gastoshogar$clave))), prop=prop.table(table(gastoshogar$clave)))
ggplot(df_temp) + geom_bat(aes(x=gasto, y=prop), stat='identity')
ggplot(df_temp) + geom_bar(aes(x=gasto, y=prop), stat='identity')
names(df_temp)
head(df_temp)
ggplot(df_temp) + geom_bar(aes(x=gasto, y=prop.Freq), stat='identity')
net4boot <- boot.strength(df_red4, R=20, algorithm='hc', algorithm.args=list(score='bic'), cpdag=FALSE)
library(foreign)
library(ggthemes)
library(knitr)
library(rgdal)
library(igraph)
library(Matrix)
library(googleVis)
library(ggmap)
library(xtable)
library(ineq)
library(bnlearn)
library(grid) #función unit
library(dplyr)
library(tidyr)
library(ggplot2)
net4boot <- boot.strength(df_red4, R=20, algorithm='hc', algorithm.args=list(score='bic'), cpdag=FALSE)
net4boot <- boot.strength(df_red4, R=20, algorithm='hc', cpdag=FALSE)
df_temp
head(df_temp)
rm(df_temp)
net4avg <- averaged.network(net4boot, names(df_red4), 0.8)
strengthavg <- arc.strength(net4avg, df_red4)
strength.plot(net4avg, strengthavg, shape='ellipse', main='Red promedio con bootstrap')
net4boot <- boot.strength(df_red4, R=50, algorithm='hc', cpdag=FALSE)
net4avg <- averaged.network(net4boot, names(df_red4), 0.8)
strengthavg <- arc.strength(net4avg, df_red4)
strength.plot(net4avg, strengthavg, shape='ellipse', main='Red promedio con bootstrap')
net4boot <- boot.strength(df_red4, R=150, algorithm='hc', cpdag=FALSE)
net4avg <- averaged.network(net4boot, names(df_red4), 0.8)
strengthavg <- arc.strength(net4avg, df_red4)
strength.plot(net4avg, strengthavg, shape='ellipse', main='Red promedio con bootstrap')
View(de_red4)
View(df_red4)
strength.plot(net4, strength4, shape='ellipse')
dim(concentradohogar)
plot(net2,  			#the graph to be plotted
layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
main='Red con relaciones más fuertes',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='white', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=1,			#the font of the name labels
vertex.label=V(net2)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1,			#specifies the size of the font of the labels. can also be made to vary
vertex.size=5,
vertex.label.cex=3
)
strength1 <- arc.strength(net1, df_red1)
net2 <- graph.edgelist(as.matrix(strength1[1:100,1:2]))
#V(net2)$size<-5
E(net2)$arrow.size=0.3
plot(net2,  			#the graph to be plotted
layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
main='Red con relaciones más fuertes',	#specifies the title
vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='white', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=1,			#the font of the name labels
vertex.label=V(net2)$name,		#specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1,			#specifies the size of the font of the labels. can also be made to vary
vertex.size=5,
vertex.label.cex=3
)
strength.plot(net2, strength2, shape='ellipse')
vars <- unique(c(strength1[1:50,1], strength1[1:50,2]))
df_red2 <- df_red1[,vars]
load('./Rdata/net2.RData')
strength2 <- arc.strength(net2, df_red2)
strength.plot(net2, strength2, shape='ellipse')
graphviz.plot(net2)
load('./Rdata/net5boot.RData')
net5avg <- averaged.network(net5boot, names(df_red4), 0.9)
library(foreign)
library(ggthemes)
library(knitr)
library(rgdal)
library(igraph)
library(Matrix)
library(googleVis)
library(ggmap)
library(xtable)
library(ineq)
library(mclust)
library(kfigr)
library(bnlearn)
library(grid) #función unit
library(dplyr)
library(tidyr)
library(ggplot2)
net5avg <- averaged.network(net5boot, names(df_red4), 0.9)
graphviz.plot(net5avg, shape='ellipse')
load('./Rdata/mclust1.RData')
cl_p <- data.frame(cluster = mclust1$classification, df_red4)
head(cl_p)
table(cl_p$cluster)
netcl <- hc(cl_p)
graphviz.plot(netcl, shape='ellipse')
ineq(filter(cl_p, cluster==1))
ineq(select(filter(cl_p, cluster==1)), ing_cor)
select(filter(cl_p, cluster==1)), ing_cor
select(filter(cl_p, cluster==1)), ing_cor)
select(filter(cl_p, cluster==1), ing_cor)
ineq(select(filter(cl_p, cluster==1), ing_cor))
ineq(as.numeric(select(filter(cl_p, cluster==1), ing_cor)))
select(filter(cl_p, cluster==1), ing_cor)
head(select(filter(cl_p, cluster==1), ing_cor))
as.numeric(select(filter(cl_p, cluster==1), ing_cor))
cl_p[cl_p$cluster==1,'ing_cor']
ineq(cl_p[cl_p$cluster==1,'ing_cor'])
ineq(cl_p[cl_p$cluster==2,'ing_cor'])
ineq(cl_p[cl_p$cluster==3,'ing_cor'])
11/14
mean(cl_p[cl_p$cluster==1,'ing_cor'])
mean(cl_p[cl_p$cluster==2,'ing_cor'])
mean(cl_p[cl_p$cluster==3,'ing_cor'])
library(foreign)
library(ggthemes)
library(knitr)
library(rgdal)
library(igraph)
library(Matrix)
library(googleVis)
library(ggmap)
library(xtable)
library(ineq)
library(mclust)
library(kfigr)
library(bnlearn)
library(grid) #función unit
library(dplyr)
library(tidyr)
library(ggplot2)
?median
median(concentradohogar$ing_cor)
?quantile
quantile(concentradohogar$ing_cor, probs=c(0.01, 0.2, 0.5, 0.7, 0.9))
ggplot(concentradohogar) + geom_boxplot(aes(ing_cor))
?geom_boxplot
ggplot(concentradohogar) + geom_boxplot(ing_cor)
ggplot(concentradohogar$ing_cor) + geom_boxplot()
ggplot(concentradohogar) + geom_boxplot(aes(x=concentradohogar))
ggplot(concentradohogar, aes(x=ing_cor)) + geom_density()
ggplot(concentradohogar, aes(x=ing_cor)) + geom_histogram()
sum(concentradohogar$ing_cor<2000)
sum(concentradohogar$ing_cor<20000)
sum(concentradohogar$ing_cor<5000)
sum(concentradohogar$ing_cor<3300)
91/nrow(concentradohogar)
sum(concentradohogar$ing_cor<11322.67)/nrow(concentradohogar)
sum(concentradohogar$ing_cor/concentradohogar$perc_ocupa<11322.67)/nrow(concentradohogar)
sum(concentradohogar$ing_cor/concentradohogar$perc_ocupa<2322.67)/nrow(concentradohogar)
sum(concentradohogar$ing_cor/concentradohogar$perc_ocupa<10000)/nrow(concentradohogar)
sum(concentradohogar$ing_cor/3*concentradohogar$perc_ocupa<10000)/nrow(concentradohogar)
sum(concentradohogar$ing_cor/(3*concentradohogar$perc_ocupa)<10000)/nrow(concentradohogar)
quantile(concentradohogar$ing_cor/(3*concentradohogar$perc_ocupa), probs=c(0.01, 0.2, 0.5, 0.7, 0.9))
sum(concentradohogar$decil_ingreso==1)
sum(concentradohogar$decil_ingreso==1)/nrow(concentradohogar)
sum(concentradohogar$decil_ingreso==10)/nrow(concentradohogar)
quantile(concentradohogar$ing_cor/(3*concentradohogar$perc_ocupa), probs=c(0.01, 0.2, 0.5, 0.7, 0.9))
concentradohogar <- within(concentradohogar, decil_ingreso <- factor(as.integer(cut(ing_cor, quantile(ing_cor, 0:10), include.lowest=TRUE))))
concentradohogar <- within(concentradohogar, decil_ingreso <- factor(as.integer(cut(ing_cor, 0:10), include.lowest=TRUE)))
sum(concentradohogar$decil_ingreso==10)/nrow(concentradohogar)
concentradohogar$decil_ingreso
Gini_Edo <- concentradohogar %>%
group_by(Estado) %>%
summarise(Gini=ineq(ing_cor))
edo_df_gini <- edo_df %>%
mutate(Estado = id) %>%
left_join(Gini_Edo)
ggplot() +
geom_polygon(data=edo_df_gini, aes(long, lat, group=group, fill=Gini), colour='black', inherit.aes=FALSE) +
coord_fixed() + scale_fill_gradientn(colours=c('light blue', 'dark blue')) + theme_nothing() + labs(fill='Índice\nde Gini')
library(foreign)
library(ggthemes)
library(knitr)
library(rgdal)
library(igraph)
library(Matrix)
library(googleVis)
library(ggmap)
library(xtable)
library(ineq)
#library(mclust)
library(kfigr)
library(bnlearn)
library(grid) #función unit
#library(flexmix)
library(R2jags)
library(dplyr)
library(tidyr)
library(ggplot2)
Gini_Edo <- concentradohogar %>%
group_by(Estado) %>%
summarise(Gini=ineq(ing_cor))
edo_df_gini <- edo_df %>%
mutate(Estado = id) %>%
left_join(Gini_Edo)
ggplot() +
geom_polygon(data=edo_df_gini, aes(long, lat, group=group, fill=Gini), colour='black', inherit.aes=FALSE) +
coord_fixed() + scale_fill_gradientn(colours=c('light blue', 'dark blue')) + theme_nothing() + labs(fill='Índice\nde Gini')
load('./Rdata/jags.fit.1.RData')
traceplot(jags.fit)
traceplot(jags.fit.1)
?lmer
